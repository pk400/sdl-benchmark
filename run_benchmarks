#!/usr/bin/python
import os
import sys
import subprocess

os.system('clear')

print('## Running SDL Benchmarks...')

# Compiles the benchmark program
print('## Compiling Benchmark...')
compile_benchmark = subprocess.Popen(
    'gcc sdlbenchmark.c `bin/sdl2-config --libs`',
    stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
compile_benchmark.wait()

# Catches any errors from compilation
(compile_out, compile_err) = compile_benchmark.communicate()
if len(compile_err) > 0:
    print('## Compile error!\n%s' % (compile_err))
else:
    print('## Compile success!')

# Script can be passed an integer which will be used to run benchmark N times
if len(sys.argv) < 2:
    n = 5
    print('Number of iterations not defined. Setting N to default. ')
else:
    n = int(sys.argv[1])
print('N = %d' % (n))

# Runs benchmark N times, catching any errors
average = 0.0
print('## Running Benchmark...')
for i in range(n):
    run_bm = subprocess.Popen('./a.out', stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)
    (out, err) = run_bm.communicate()
    average = average + float(out)
    print('Test %s: %s seconds' % (str(i+1), out))
    if len(err) > 0:
        print('\tErrors: \n\t%s' % (err))
print('## Benchmark complete!')

# Output benchmark results
print("Benchmark Results: %f seconds" % (average/n))
